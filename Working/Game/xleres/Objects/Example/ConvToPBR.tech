// CompoundDocument:1
#include "xleres/System/Prefix.h"

#include "xleres/Surface.h"
#include "xleres/Nodes/Texture.sh"
#include "xleres/Nodes/Output.sh"
#include "xleres/Nodes/Basic.sh"
#include "xleres/ToolsHelper/DecodeParametersTexture_ColoredSpecular.sh"
#include "xleres/Colour.h"


Texture2D SpecularColorTexture;
cbuffer BasicMaterialConstants
{
	float Opacity;
	float AlphaThreshold;
	float MetalMin;
	float MetalMax;
	float RoughnessMin;
	float RoughnessMax;
	float SpecularMin;
	float SpecularMax;
	float3 MaterialDiffuse;
}
void ConvToPBR(VSOutput geo, out GBufferValues Out)
{
	float Output_19_result;
	Output_19_result = GetVertexAOMultiplier( geo );

	float3 Output_22_rgb;
	float Output_22_alpha;
	SampleTextureDiffuse( geo, Output_22_rgb, Output_22_alpha );

	float Output_25_result;
	Output_25_result = MaybeDoAlphaTest( Output_22_alpha, AlphaThreshold );

	float Output_30_result;
	Output_30_result = GetVertexOpacityMultiplier( geo );

	float Output_26_result;
	Output_26_result = Multiply1( Output_25_result, Output_30_result );

	float Output_20_result;
	Output_20_result = Multiply1( Output_26_result, Opacity );

	float3 Output_27_result;
	Output_27_result = GetNormal( geo );

	float3 Output_23_result;
	Output_23_result = MaybeMakeDoubleSided( geo, Output_27_result );

	float2 Output_28_result;
	Output_28_result = GetTexCoord( geo );

	float4 Output_21_result;
	Output_21_result = SampleAnisotropic( SpecularColorTexture, Output_28_result );

	float2 Output_33_result;
	Combine2( SpecularMin, SpecularMax, Output_33_result );

	float2 Output_34_result;
	Combine2( RoughnessMin, RoughnessMax, Output_34_result );

	float2 Output_35_result;
	Combine2( MetalMin, MetalMax, Output_35_result );

	float3 Output_24_finalDiffuseSample;
	CommonMaterialParam Output_24_materialParam;
	DecodeParametersTexture_ColoredSpecular( Output_35_result, Output_34_result, Output_33_result, Output_22_rgb, Cast_float4_to_float3(Output_21_result), Output_24_finalDiffuseSample, Output_24_materialParam );

	float Output_36_result;
	Output_36_result = SampleTextureAO( geo );

	float Output_29_result;
	Output_29_result = Multiply1( Output_19_result, Output_36_result );

	float3 Output_31_result;
	Output_31_result = SRGBToLinear( MaterialDiffuse );

	float3 Output_32_result;
	Output_32_result = Multiply3( Output_31_result, Output_24_finalDiffuseSample );

	GBufferValues Output_18_result;
	Output_18_result = Output_PerPixel( Output_32_result, Output_23_result, Output_24_materialParam, Output_20_result, 1.0f, Output_29_result, Output_19_result, float3(0,0,0) );

	Out = Output_18_result;

}
/* <<Chunk:NodeGraph:ConvToPBR>>--(
<?xml version="1.0" encoding="utf-8"?>
<NodeGraph xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/ShaderPatcherLayer">
	<ConstantConnections>
		<ConstantConnection>
			<OutputNodeID>18</OutputNodeID>
			<OutputParameterName>normalMapAccuracy</OutputParameterName>
			<Value>1.0f</Value>
		</ConstantConnection>
		<ConstantConnection>
			<OutputNodeID>18</OutputNodeID>
			<OutputParameterName>transmission</OutputParameterName>
			<Value>float3(0,0,0)</Value>
		</ConstantConnection>
	</ConstantConnections>
	<InputParameterConnections>
		<InputParameterConnection>
			<OutputNodeID>20</OutputNodeID>
			<OutputParameterName>rhs</OutputParameterName>
			<Default>1.f</Default>
			<Name>Opacity</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>2</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>25</OutputNodeID>
			<OutputParameterName>alphaThreshold</OutputParameterName>
			<Default>.33f</Default>
			<Name>AlphaThreshold</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>2</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>21</OutputNodeID>
			<OutputParameterName>inputTexture</OutputParameterName>
			<Default i:nil="true" />
			<Name>SpecularColorTexture</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>3</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>35</OutputNodeID>
			<OutputParameterName>r</OutputParameterName>
			<Default>0.f</Default>
			<Name>MetalMin</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>4</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>35</OutputNodeID>
			<OutputParameterName>g</OutputParameterName>
			<Default>1.f</Default>
			<Name>MetalMax</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>4</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>34</OutputNodeID>
			<OutputParameterName>r</OutputParameterName>
			<Default>0.5f</Default>
			<Name>RoughnessMin</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>4</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>34</OutputNodeID>
			<OutputParameterName>g</OutputParameterName>
			<Default>1.f</Default>
			<Name>RoughnessMax</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>4</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>33</OutputNodeID>
			<OutputParameterName>r</OutputParameterName>
			<Default>0.1f</Default>
			<Name>SpecularMin</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>4</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>33</OutputNodeID>
			<OutputParameterName>g</OutputParameterName>
			<Default>1.f</Default>
			<Name>SpecularMax</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>4</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>31</OutputNodeID>
			<OutputParameterName>input</OutputParameterName>
			<Default>{1.f, 1.f, 1.f}c</Default>
			<Name>MaterialDiffuse</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>5</VisualNodeId>
		</InputParameterConnection>
	</InputParameterConnections>
	<NodeConnections>
		<NodeConnection>
			<OutputNodeID>23</OutputNodeID>
			<OutputParameterName>normal</OutputParameterName>
			<InputNodeID>27</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float3</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>29</OutputNodeID>
			<OutputParameterName>rhs</OutputParameterName>
			<InputNodeID>36</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>18</OutputNodeID>
			<OutputParameterName>cookedLightOcclusion</OutputParameterName>
			<InputNodeID>19</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>29</OutputNodeID>
			<OutputParameterName>lhs</OutputParameterName>
			<InputNodeID>19</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>18</OutputNodeID>
			<OutputParameterName>blendingAlpha</OutputParameterName>
			<InputNodeID>20</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>24</OutputNodeID>
			<OutputParameterName>specColorSample</OutputParameterName>
			<InputNodeID>21</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float4</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>25</OutputNodeID>
			<OutputParameterName>alpha</OutputParameterName>
			<InputNodeID>22</InputNodeID>
			<InputParameterName>alpha</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>24</OutputNodeID>
			<OutputParameterName>diffuseSample</OutputParameterName>
			<InputNodeID>22</InputNodeID>
			<InputParameterName>rgb</InputParameterName>
			<InputType>float3</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>18</OutputNodeID>
			<OutputParameterName>worldSpaceNormal</OutputParameterName>
			<InputNodeID>23</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float3</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>18</OutputNodeID>
			<OutputParameterName>material</OutputParameterName>
			<InputNodeID>24</InputNodeID>
			<InputParameterName>materialParam</InputParameterName>
			<InputType>CommonMaterialParam</InputType>
			<OutputType>CommonMaterialParam</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>32</OutputNodeID>
			<OutputParameterName>rhs</OutputParameterName>
			<InputNodeID>24</InputNodeID>
			<InputParameterName>finalDiffuseSample</InputParameterName>
			<InputType>float3</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>26</OutputNodeID>
			<OutputParameterName>lhs</OutputParameterName>
			<InputNodeID>25</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>20</OutputNodeID>
			<OutputParameterName>lhs</OutputParameterName>
			<InputNodeID>26</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>21</OutputNodeID>
			<OutputParameterName>texCoord</OutputParameterName>
			<InputNodeID>28</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float2</InputType>
			<OutputType>float2</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>18</OutputNodeID>
			<OutputParameterName>cookedAmbientOcclusion</OutputParameterName>
			<InputNodeID>29</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>26</OutputNodeID>
			<OutputParameterName>rhs</OutputParameterName>
			<InputNodeID>30</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>32</OutputNodeID>
			<OutputParameterName>lhs</OutputParameterName>
			<InputNodeID>31</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float3</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>18</OutputNodeID>
			<OutputParameterName>diffuseAlbedo</OutputParameterName>
			<InputNodeID>32</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float3</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>24</OutputNodeID>
			<OutputParameterName>specularRange</OutputParameterName>
			<InputNodeID>33</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float2</InputType>
			<OutputType>float2</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>24</OutputNodeID>
			<OutputParameterName>roughnessRange</OutputParameterName>
			<InputNodeID>34</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float2</InputType>
			<OutputType>float2</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>24</OutputNodeID>
			<OutputParameterName>metalRange</OutputParameterName>
			<InputNodeID>35</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float2</InputType>
			<OutputType>float2</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
	</NodeConnections>
	<Nodes>
		<Node>
			<FragmentArchiveName>xleres/Surface.h:GetNormal</FragmentArchiveName>
			<NodeId>27</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>0</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:SampleTextureAO</FragmentArchiveName>
			<NodeId>36</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>6</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Output.sh:Output_PerPixel</FragmentArchiveName>
			<NodeId>18</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>7</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:GetVertexAOMultiplier</FragmentArchiveName>
			<NodeId>19</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>8</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Multiply1</FragmentArchiveName>
			<NodeId>20</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>9</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:SampleAnisotropic</FragmentArchiveName>
			<NodeId>21</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>10</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:SampleTextureDiffuse</FragmentArchiveName>
			<NodeId>22</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>11</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:MaybeMakeDoubleSided</FragmentArchiveName>
			<NodeId>23</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>12</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/ToolsHelper\DecodeParametersTexture_ColoredSpecular.sh:DecodeParametersTexture_ColoredSpecular</FragmentArchiveName>
			<NodeId>24</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>13</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:MaybeDoAlphaTest</FragmentArchiveName>
			<NodeId>25</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>14</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Multiply1</FragmentArchiveName>
			<NodeId>26</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>15</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Surface.h:GetTexCoord</FragmentArchiveName>
			<NodeId>28</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>16</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Multiply1</FragmentArchiveName>
			<NodeId>29</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>17</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:GetVertexOpacityMultiplier</FragmentArchiveName>
			<NodeId>30</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>18</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Colour.h:SRGBToLinear</FragmentArchiveName>
			<NodeId>31</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>19</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Multiply3</FragmentArchiveName>
			<NodeId>32</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>20</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Combine2</FragmentArchiveName>
			<NodeId>33</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>21</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Combine2</FragmentArchiveName>
			<NodeId>34</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>22</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Combine2</FragmentArchiveName>
			<NodeId>35</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>23</VisualNodeId>
		</Node>
	</Nodes>
	<OutputParameterConnections>
		<OutputParameterConnection>
			<InputNodeID>18</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<Name>Out</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>1</VisualNodeId>
		</OutputParameterConnection>
	</OutputParameterConnections>
	<PreviewSettingsObjects>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>0</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>6</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Model</Geometry>
			<OutputToVisualize>result.diffuseAlbedo</OutputToVisualize>
			<VisualNodeId>7</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>8</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>9</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>10</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>11</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>12</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize>result2.roughness</OutputToVisualize>
			<VisualNodeId>13</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>14</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>15</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>16</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>17</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>18</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>19</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>20</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>21</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>22</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>23</VisualNodeId>
		</PreviewSettings>
	</PreviewSettingsObjects>
	<VisualNodes>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>653</d4p1:x>
				<d4p1:y>182</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>2134.90186</d4p1:x>
				<d4p1:y>246.917114</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-496</d4p1:x>
				<d4p1:y>643</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-985</d4p1:x>
				<d4p1:y>-91</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-614</d4p1:x>
				<d4p1:y>-428</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>237</d4p1:x>
				<d4p1:y>-201</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>788</d4p1:x>
				<d4p1:y>691</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>1660</d4p1:x>
				<d4p1:y>207</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>773</d4p1:x>
				<d4p1:y>621</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>377</d4p1:x>
				<d4p1:y>561</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-476</d4p1:x>
				<d4p1:y>-93</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-476</d4p1:x>
				<d4p1:y>211</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>817</d4p1:x>
				<d4p1:y>180</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>262</d4p1:x>
				<d4p1:y>-31</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-74</d4p1:x>
				<d4p1:y>343</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>188</d4p1:x>
				<d4p1:y>483</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-862</d4p1:x>
				<d4p1:y>6</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>1059</d4p1:x>
				<d4p1:y>664</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-117</d4p1:x>
				<d4p1:y>540</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>590</d4p1:x>
				<d4p1:y>-143</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>771</d4p1:x>
				<d4p1:y>-109</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-174</d4p1:x>
				<d4p1:y>-229</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-175</d4p1:x>
				<d4p1:y>-285</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-181</d4p1:x>
				<d4p1:y>-344</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
	</VisualNodes>
</NodeGraph>
)-- */
/* <<Chunk:NodeGraphContext:ConvToPBR>>--(
<?xml version="1.0" encoding="utf-8"?>
<NodeGraphContext xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/ShaderPatcherLayer">
	<HasTechniqueConfig>true</HasTechniqueConfig>
	<ShaderParameters xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<Variables xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
</NodeGraphContext>
)-- */



#include "TextureAlgorithm.h" 	// for SystemInputs
#include "Lighting/Forward.h"

#if !((OUTPUT_TEXCOORD==1) && (MAT_ALPHA_TEST==1))
	[earlydepthstencil]
#endif
float4 forward_main(VSOutput geo, SystemInputs sys) : SV_Target0
{
    // If we're doing to do the alpha threshold test, we
    // should try to do as early in the shader as we can!
    // Unfortunately, there's no real easy way to do that with
    // a node graph here...Unless we create some special #define
    // somehow...

	// DoAlphaTest(geo, GetAlphaThreshold());

	GBufferValues sample;
    ConvToPBR(geo, sample);

	float3 directionToEye = 0.0.xxx;
	#if (OUTPUT_WORLD_VIEW_VECTOR==1)
		directionToEye = normalize(geo.worldViewVector);
	#endif

	float4 result = float4(
		ResolveLitColor(
			sample, directionToEye, GetWorldPosition(geo),
			LightScreenDest_Create(int2(geo.position.xy), GetSampleIndex(sys))), 1.f);

	#if OUTPUT_FOG_COLOR == 1
		result.rgb = geo.fogColor.rgb + result.rgb * geo.fogColor.a;
	#endif

	result.a = sample.blendingAlpha;

    #if (OUTPUT_COLOUR>=1) && (MAT_VCOLOR_IS_ANIM_PARAM==0)
        result.rgb *= geo.colour.rgb;
    #endif

	#if MAT_SKIP_LIGHTING_SCALE==0
		result.rgb *= LightingScale;		// (note -- should we scale by this here? when using this shader with a basic lighting pipeline [eg, for material preview], the scale is unwanted)
	#endif
	return result;
}



#if !((OUTPUT_TEXCOORD==1) && (MAT_ALPHA_TEST==1))
	[earlydepthstencil]
#endif
GBufferEncoded deferred_main(VSOutput geo)
{
    // If we're doing to do the alpha threshold test, we
    // should try to do as early in the shader as we can!
    // Unfortunately, there's no real easy way to do that with
    // a node graph here...Unless we create some special #define
    // somehow...
	// DoAlphaTest(geo, GetAlphaThreshold());
	GBufferValues result;
    ConvToPBR(geo, result);
	return Encode(result);
}



#include "xleres/Forward/Transparency/util.h"

float4 io_main(VSOutput geo, SystemInputs sys) : SV_Target0
{
    float destinationDepth = DuplicateOfDepthBuffer[uint2(geo.position.xy)];
	float ndcComparison = geo.position.z; // / geo.position.w;
	if (ndcComparison > destinationDepth)
		discard;

    GBufferValues sample;
    ConvToPBR(geo, sample);

		// note --  At alpha threshold, we just consider
		//			it opaque. It's a useful optimisation
		//			that goes hand in hand with the pre-depth pass.
	const float minAlpha =   1.f / 255.f;
	const float maxAlpha = 0.95f; // 254.f / 255.f;  // AlphaThreshold;
	if (sample.blendingAlpha < minAlpha) {
		discard;
	}

    float4 result = LightSample(sample, geo, sys);

    if (result.a >= maxAlpha) {
		return float4(LightingScale * result.rgb, 1.f); // result.a);
	} else {
		#if !MAT_PREMULTIPLIED_ALPHA
			result.rgb *= result.a;
		#endif

		OutputFragmentNode(uint2(geo.position.xy), result, ndcComparison);
		discard;
		return 0.0.xxxx;
	}
}



[earlydepthstencil]
float4 stochastic_main(VSOutput geo,
	#if (STOCHASTIC_TRANS_PRIMITIVEID==1)
		uint primitiveID : SV_PrimitiveID,
	#endif
	SystemInputs sys) : SV_Target
{
	float occlusion;
	uint type = CalculateStochasticPixelType(geo.position, occlusion);
	[branch] if (type > 0) {
		if (type == 2) return float4(0.0.xxx, 1); // discard;

		// Only need to calculate the "alpha" value for this step...
		GBufferValues sample;
		ConvToPBR(geo, sample);
		return float4(0.0.xxx, sample.blendingAlpha);
	}

	GBufferValues sample;
	ConvToPBR(geo, sample);

	float4 litValue = LightSample(sample, geo, sys);
	return float4((LightingScale * (1.f - occlusion) * litValue.a) * litValue.rgb, litValue.a);
}



#include "Forward/Transparency/depthonlyutil.h"

#if (STOCHASTIC_TRANS)

	void depthonly_main(
		VSOutput geo, uint primitiveID : SV_PrimitiveID,
		out uint oCoverage : SV_Coverage
		#if (STOCHASTIC_TRANS_PRIMITIVEID==1)
			, out uint oPrimId : SV_Target0
			#if (STOCHASTIC_TRANS_OPACITY==1)
				, out float oOpacity : SV_Target1
			#endif
		#elif (STOCHASTIC_TRANS_OPACITY==1)
			, out float oOpacity : SV_Target0
		#endif

		)
	{
		GBufferValues sample;
		ConvToPBR(geo, sample);
		float alpha = sample.blendingAlpha;

		oCoverage = StochasticTransMask(uint2(geo.position.xy), alpha, primitiveID);
		#if (STOCHASTIC_TRANS_PRIMITIVEID==1)
			oPrimId = primitiveID;
		#endif
		#if (STOCHASTIC_TRANS_OPACITY==1)
			oOpacity = alpha;
		#endif
	}

#else

	#if !((OUTPUT_TEXCOORD==1) && ((MAT_ALPHA_TEST==1)||(MAT_ALPHA_TEST_PREDEPTH==1)))
		[earlydepthstencil]
	#endif
	void depthonly_main(VSOutput geo)
	{
		#if !((OUTPUT_TEXCOORD==1) && ((MAT_ALPHA_TEST==1)||(MAT_ALPHA_TEST_PREDEPTH==1)))
				// execute sampling only for discard() events
			GBufferValues sample;
			ConvToPBR(geo, sample);
		#endif
	}

#endif


/* <<Chunk:TechniqueConfig:main>>--(
~Inherit; xleres/techniques/illum.tech
~Forward
    PixelShader=<.>:forward_main
~Deferred
    PixelShader=<.>:deferred_main
~OrderIndependentTransparency
    PixelShader=<.>:oi_main
~StochasticTransparency
    PixelShader=<.>:stochastic_main
~DepthOnly
    PixelShader=<.>:depthonly_main
)--*/

/* <<Chunk:CBLayout:main>>--(
float Opacity = 1.f;
float AlphaThreshold = .33f;
float MetalMin = 0.f;
float MetalMax = 1.f;
float RoughnessMin = 0.5f;
float RoughnessMax = 1.f;
float SpecularMin = 0.1f;
float SpecularMax = 1.f;
float3 MaterialDiffuse = {1.f, 1.f, 1.f}c;

)--*/

